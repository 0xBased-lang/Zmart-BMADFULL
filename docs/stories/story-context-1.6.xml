<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>1.6</storyId>
    <title>Implement MarketResolution Program - Community Voting Foundation</title>
    <status>Ready for Dev</status>
    <generatedAt>2025-10-26</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/story-1.6.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>voter</asA>
    <iWant>to participate in determining market outcomes</iWant>
    <soThat>the platform remains community-driven</soThat>
    <tasks>
      - Define VoteRecord account structure (AC: #1)
      - Define ResolutionState account structure (AC: #3, #5)
      - Define VoteResult account structure (Epic 2 Snapshot)
      - Define VoteChoice enum
      - Implement initialize_resolution instruction (AC: #5)
      - Implement submit_vote instruction (AC: #2)
      - Implement finalize_resolution instruction (AC: #3, #4, #5)
      - Implement admin_override_resolution instruction (AC: #6)
      - Implement post_vote_result instruction (Epic 2)
      - Implement determine_outcome helper function
      - Define error types
      - Implement event emissions
      - Write comprehensive tests (AC: #7)
      - Deploy to devnet (AC: #8)
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">VoteRecord account structure defined (market_id, voter, vote_choice, vote_weight, timestamp)</criterion>
    <criterion id="2">submit_vote instruction records vote on-chain (placeholder for Epic 2's full Snapshot integration)</criterion>
    <criterion id="3">finalize_resolution instruction aggregates votes and determines outcome (YES/NO/CANCELLED)</criterion>
    <criterion id="4">Market status updates to RESOLVED with winning side recorded</criterion>
    <criterion id="5">48-hour dispute window enforced (market can't finalize until dispute period ends)</criterion>
    <criterion id="6">Admin override capability implemented for MVP progressive decentralization</criterion>
    <criterion id="7">Tests validate voting, aggregation, dispute window, and admin override</criterion>
    <criterion id="8">Deployed to devnet</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/epics.md</path>
        <title>Epic 1: Foundation & Infrastructure</title>
        <section>Story 1.6</section>
        <snippet>MarketResolution provides community voting foundation for determining market outcomes with 48-hour dispute window and progressive decentralization via admin override.</snippet>
      </doc>
      <doc>
        <path>docs/architecture.md</path>
        <title>System Architecture</title>
        <section>48-Hour Dispute Window</section>
        <snippet>State machine for resolution validation. Markets can't finalize until 48 hours after voting starts, giving community time to review and dispute fraudulent outcomes.</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-1.3.md</path>
        <title>Story 1.3: ParameterStorage</title>
        <section>Completion Notes</section>
        <snippet>GlobalParameters provides dispute_window_seconds configuration for MarketResolution integration.</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-1.4.md</path>
        <title>Story 1.4: CoreMarkets</title>
        <section>Completion Notes</section>
        <snippet>CoreMarkets needs resolved outcome from MarketResolution for payout distribution. Integration point for market finalization.</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>programs/market-resolution/src/lib.rs</path>
        <kind>program</kind>
        <symbol>market_resolution</symbol>
        <lines>1-590</lines>
        <reason>Complete MarketResolution implementation with 5 instructions: submit_vote, initialize_resolution, finalize_resolution, admin_override_resolution, post_vote_result. Includes voting, aggregation, dispute window, and Snapshot foundation.</reason>
      </artifact>
      <artifact>
        <path>programs/market-resolution/src/lib.rs</path>
        <kind>account</kind>
        <symbol>VoteRecord</symbol>
        <lines>286-294</lines>
        <reason>Individual vote record per voter per market. Tracks market_id, voter, vote_choice, vote_weight, timestamp. ~70 bytes. PDA prevents double voting.</reason>
      </artifact>
      <artifact>
        <path>programs/market-resolution/src/lib.rs</path>
        <kind>account</kind>
        <symbol>ResolutionState</symbol>
        <lines>297-310</lines>
        <reason>Aggregated resolution state per market. Tracks vote counters, finalization status, outcome, dispute window timing. ~100 bytes.</reason>
      </artifact>
      <artifact>
        <path>programs/market-resolution/src/lib.rs</path>
        <kind>account</kind>
        <symbol>VoteResult</symbol>
        <lines>316-342</lines>
        <reason>Snapshot-style off-chain voting result (Epic 2). Stores aggregated vote weights, merkle root for verification, dispute window. ~120 bytes.</reason>
      </artifact>
      <artifact>
        <path>programs/market-resolution/src/lib.rs</path>
        <kind>instruction</kind>
        <symbol>submit_vote</symbol>
        <lines>25-76</lines>
        <reason>Records individual vote on-chain. Validates market not finalized, creates VoteRecord PDA, updates ResolutionState counters. Emits VoteSubmittedEvent.</reason>
      </artifact>
      <artifact>
        <path>programs/market-resolution/src/lib.rs</path>
        <kind>instruction</kind>
        <symbol>initialize_resolution</symbol>
        <lines>78-112</lines>
        <reason>Starts voting period for market. Reads dispute_window_seconds from GlobalParameters, initializes ResolutionState with timing. Emits ResolutionInitializedEvent.</reason>
      </artifact>
      <artifact>
        <path>programs/market-resolution/src/lib.rs</path>
        <kind>instruction</kind>
        <symbol>finalize_resolution</symbol>
        <lines>114-165</lines>
        <reason>Aggregates votes and determines outcome. Validates dispute window passed, calls determine_outcome helper, finalizes with majority result. Emits ResolutionFinalizedEvent.</reason>
      </artifact>
      <artifact>
        <path>programs/market-resolution/src/lib.rs</path>
        <kind>instruction</kind>
        <symbol>admin_override_resolution</symbol>
        <lines>167-204</lines>
        <reason>Progressive decentralization: Admin can override outcome during Epic 1 MVP. Validates authority, sets outcome, finalizes immediately. Emits AdminOverrideEvent. Removed in Epic 2.</reason>
      </artifact>
      <artifact>
        <path>programs/market-resolution/src/lib.rs</path>
        <kind>instruction</kind>
        <symbol>post_vote_result</symbol>
        <lines>206-260</lines>
        <reason>Posts Snapshot-style off-chain voting result (Epic 2). Platform aggregates gas-free votes, posts result with merkle root for verification. Foundation for full Snapshot integration.</reason>
      </artifact>
      <artifact>
        <path>programs/market-resolution/src/lib.rs</path>
        <kind>helper</kind>
        <symbol>determine_outcome</symbol>
        <lines>267-279</lines>
        <reason>Vote aggregation algorithm. Compares yes/no/cancel votes, returns majority. Tie defaults to Cancel. Simple plurality voting for Epic 1.</reason>
      </artifact>
      <artifact>
        <path>programs/parameter-storage/src/lib.rs</path>
        <kind>account</kind>
        <symbol>GlobalParameters</symbol>
        <lines>1-150</lines>
        <reason>Cross-program dependency. Provides dispute_window_seconds (48 hours) and authority for admin override validation.</reason>
      </artifact>
    </code>
    <dependencies>
      <anchor>
        <package>anchor-lang</package>
        <version>0.32.1</version>
        <reason>Solana program framework with account macros and CPI support</reason>
      </anchor>
      <solana>
        <package>solana-program</package>
        <version>Bundled with Anchor</version>
        <reason>Core Solana primitives and system program</reason>
      </solana>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>Use Anchor 0.32.1 framework with anchor-lang macros</constraint>
    <constraint>PDA-derived accounts: VoteRecord = ["vote-record", market_id, voter], ResolutionState = ["resolution-state", market_id], VoteResult = ["vote-result", market_id]</constraint>
    <constraint>One vote per wallet per market (enforced by PDA derivation)</constraint>
    <constraint>48-hour dispute window from ParameterStorage.dispute_window_seconds</constraint>
    <constraint>Cannot finalize until dispute window passes (current_time >= dispute_window_ends_at)</constraint>
    <constraint>Admin override requires authority match with GlobalParameters.authority</constraint>
    <constraint>Majority voting: highest vote count wins, tie defaults to Cancel</constraint>
    <constraint>VoteChoice enum: Yes, No, Cancel (three possible outcomes)</constraint>
    <constraint>Account space: VoteRecord ~70 bytes, ResolutionState ~100 bytes, VoteResult ~120 bytes</constraint>
    <constraint>Emit events for all state changes</constraint>
    <constraint>Progressive decentralization: admin override in Epic 1, removed in Epic 2</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>GlobalParameters (ParameterStorage)</name>
      <kind>Cross-Program Account Read</kind>
      <signature>
        pub struct GlobalParameters {
          pub authority: Pubkey,
          pub dispute_window_seconds: i64,
          ...
        }
      </signature>
      <path>programs/parameter-storage/src/lib.rs</path>
      <usage>Read in initialize_resolution for dispute window duration, in admin_override for authority validation</usage>
    </interface>
    <interface>
      <name>submit_vote</name>
      <kind>Anchor Instruction</kind>
      <signature>pub fn submit_vote(ctx: Context&lt;SubmitVote&gt;, vote_choice: VoteChoice, vote_weight: u64) -&gt; Result&lt;()&gt;</signature>
      <path>programs/market-resolution/src/lib.rs:25-76</path>
      <usage>Records individual vote. Creates VoteRecord PDA, updates ResolutionState counters. One vote per wallet enforced by PDA seeds.</usage>
    </interface>
    <interface>
      <name>initialize_resolution</name>
      <kind>Anchor Instruction</kind>
      <signature>pub fn initialize_resolution(ctx: Context&lt;InitializeResolution&gt;, market_id: u64) -&gt; Result&lt;()&gt;</signature>
      <path>programs/market-resolution/src/lib.rs:78-112</path>
      <usage>Starts voting period. Calculates dispute window end time, initializes ResolutionState with zero votes.</usage>
    </interface>
    <interface>
      <name>finalize_resolution</name>
      <kind>Anchor Instruction</kind>
      <signature>pub fn finalize_resolution(ctx: Context&lt;FinalizeResolution&gt;) -&gt; Result&lt;()&gt;</signature>
      <path>programs/market-resolution/src/lib.rs:114-165</path>
      <usage>Determines outcome by majority vote. Validates dispute window passed, aggregates votes, finalizes with winning side.</usage>
    </interface>
    <interface>
      <name>admin_override_resolution</name>
      <kind>Anchor Instruction</kind>
      <signature>pub fn admin_override_resolution(ctx: Context&lt;AdminOverrideResolution&gt;, outcome: VoteChoice) -&gt; Result&lt;()&gt;</signature>
      <path>programs/market-resolution/src/lib.rs:167-204</path>
      <usage>Admin override for progressive decentralization (Epic 1 only). Validates authority, immediately finalizes with admin's choice.</usage>
    </interface>
    <interface>
      <name>post_vote_result</name>
      <kind>Anchor Instruction</kind>
      <signature>pub fn post_vote_result(ctx: Context&lt;PostVoteResult&gt;, data: PostVoteResultData) -&gt; Result&lt;()&gt;</signature>
      <path>programs/market-resolution/src/lib.rs:206-260</path>
      <usage>Posts Snapshot-style off-chain voting result (Epic 2). Platform aggregates gas-free votes, posts with merkle root for verification.</usage>
    </interface>
    <interface>
      <name>determine_outcome</name>
      <kind>Helper Function</kind>
      <signature>fn determine_outcome(yes_votes: u64, no_votes: u64, cancel_votes: u64) -&gt; VoteChoice</signature>
      <path>programs/market-resolution/src/lib.rs:267-279</path>
      <usage>Vote aggregation algorithm. Returns highest vote count, tie defaults to Cancel.</usage>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Anchor test suite using Mocha and Chai with TypeScript. Tests located in tests/ directory. Each instruction requires:
      1) Happy path test with valid inputs
      2) Edge case tests (tie scenarios, dispute window boundary)
      3) Error case tests (early finalization, unauthorized override)
      4) Integration tests for cross-program calls

      Devnet deployment testing required before marking story complete. Initialize resolution, submit votes, wait for dispute window, finalize with outcome.
    </standards>
    <locations>
      - tests/market-resolution.ts (primary test file)
      - Anchor.toml (test configuration with devnet cluster)
    </locations>
    <ideas>
      <test ac="1">Test VoteRecord account initialization with all fields</test>
      <test ac="2">Test submit_vote creates VoteRecord PDA correctly</test>
      <test ac="2">Test submit_vote updates yes_votes counter</test>
      <test ac="2">Test submit_vote updates no_votes counter</test>
      <test ac="2">Test submit_vote updates cancel_votes counter</test>
      <test ac="2">Test submit_vote increments total_voters</test>
      <test ac="2">Test submit_vote rejects after market finalized</test>
      <test ac="3">Test finalize_resolution determines Yes outcome (majority Yes)</test>
      <test ac="3">Test finalize_resolution determines No outcome (majority No)</test>
      <test ac="3">Test finalize_resolution determines Cancel outcome (majority Cancel)</test>
      <test ac="3">Test finalize_resolution defaults to Cancel on tie</test>
      <test ac="4">Test ResolutionState outcome field updated correctly</test>
      <test ac="4">Test is_finalized set to true after finalization</test>
      <test ac="4">Test finalized_at timestamp recorded</test>
      <test ac="5">Test initialize_resolution calculates dispute_window_ends_at</test>
      <test ac="5">Test finalize_resolution rejects before dispute window (DisputeWindowNotEnded error)</test>
      <test ac="5">Test finalize_resolution succeeds after dispute window passes</test>
      <test ac="6">Test admin_override with valid admin authority</test>
      <test ac="6">Test admin_override sets outcome immediately</test>
      <test ac="6">Test admin_override rejects unauthorized user (Unauthorized error)</test>
      <test ac="7">Test post_vote_result stores merkle root (Snapshot foundation)</test>
      <test ac="8">Deploy to devnet and verify program ID</test>
      <test ac="8">Test full voting flow on devnet</test>
    </ideas>
  </tests>
</story-context>
